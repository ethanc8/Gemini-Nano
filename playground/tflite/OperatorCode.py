# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class OperatorCode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OperatorCode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOperatorCode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OperatorCodeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # OperatorCode
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OperatorCode
    def DeprecatedBuiltinCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # OperatorCode
    def CustomCode(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OperatorCode
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # OperatorCode
    def BuiltinCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def OperatorCodeStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    OperatorCodeStart(builder)

def OperatorCodeAddDeprecatedBuiltinCode(builder: flatbuffers.Builder, deprecatedBuiltinCode: int):
    builder.PrependInt8Slot(0, deprecatedBuiltinCode, 0)

def AddDeprecatedBuiltinCode(builder: flatbuffers.Builder, deprecatedBuiltinCode: int):
    OperatorCodeAddDeprecatedBuiltinCode(builder, deprecatedBuiltinCode)

def OperatorCodeAddCustomCode(builder: flatbuffers.Builder, customCode: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(customCode), 0)

def AddCustomCode(builder: flatbuffers.Builder, customCode: int):
    OperatorCodeAddCustomCode(builder, customCode)

def OperatorCodeAddVersion(builder: flatbuffers.Builder, version: int):
    builder.PrependInt32Slot(2, version, 1)

def AddVersion(builder: flatbuffers.Builder, version: int):
    OperatorCodeAddVersion(builder, version)

def OperatorCodeAddBuiltinCode(builder: flatbuffers.Builder, builtinCode: int):
    builder.PrependInt32Slot(3, builtinCode, 0)

def AddBuiltinCode(builder: flatbuffers.Builder, builtinCode: int):
    OperatorCodeAddBuiltinCode(builder, builtinCode)

def OperatorCodeEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return OperatorCodeEnd(builder)
