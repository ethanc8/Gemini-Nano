# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class BatchMatMulOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BatchMatMulOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBatchMatMulOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BatchMatMulOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # BatchMatMulOptions
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BatchMatMulOptions
    def AdjX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # BatchMatMulOptions
    def AdjY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # BatchMatMulOptions
    def AsymmetricQuantizeInputs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def BatchMatMulOptionsStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    BatchMatMulOptionsStart(builder)

def BatchMatMulOptionsAddAdjX(builder: flatbuffers.Builder, adjX: bool):
    builder.PrependBoolSlot(0, adjX, 0)

def AddAdjX(builder: flatbuffers.Builder, adjX: bool):
    BatchMatMulOptionsAddAdjX(builder, adjX)

def BatchMatMulOptionsAddAdjY(builder: flatbuffers.Builder, adjY: bool):
    builder.PrependBoolSlot(1, adjY, 0)

def AddAdjY(builder: flatbuffers.Builder, adjY: bool):
    BatchMatMulOptionsAddAdjY(builder, adjY)

def BatchMatMulOptionsAddAsymmetricQuantizeInputs(builder: flatbuffers.Builder, asymmetricQuantizeInputs: bool):
    builder.PrependBoolSlot(2, asymmetricQuantizeInputs, 0)

def AddAsymmetricQuantizeInputs(builder: flatbuffers.Builder, asymmetricQuantizeInputs: bool):
    BatchMatMulOptionsAddAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs)

def BatchMatMulOptionsEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return BatchMatMulOptionsEnd(builder)
