# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class SkipGramOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SkipGramOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSkipGramOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SkipGramOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # SkipGramOptions
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SkipGramOptions
    def NgramSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkipGramOptions
    def MaxSkipSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkipGramOptions
    def IncludeAllNgrams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SkipGramOptionsStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    SkipGramOptionsStart(builder)

def SkipGramOptionsAddNgramSize(builder: flatbuffers.Builder, ngramSize: int):
    builder.PrependInt32Slot(0, ngramSize, 0)

def AddNgramSize(builder: flatbuffers.Builder, ngramSize: int):
    SkipGramOptionsAddNgramSize(builder, ngramSize)

def SkipGramOptionsAddMaxSkipSize(builder: flatbuffers.Builder, maxSkipSize: int):
    builder.PrependInt32Slot(1, maxSkipSize, 0)

def AddMaxSkipSize(builder: flatbuffers.Builder, maxSkipSize: int):
    SkipGramOptionsAddMaxSkipSize(builder, maxSkipSize)

def SkipGramOptionsAddIncludeAllNgrams(builder: flatbuffers.Builder, includeAllNgrams: bool):
    builder.PrependBoolSlot(2, includeAllNgrams, 0)

def AddIncludeAllNgrams(builder: flatbuffers.Builder, includeAllNgrams: bool):
    SkipGramOptionsAddIncludeAllNgrams(builder, includeAllNgrams)

def SkipGramOptionsEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return SkipGramOptionsEnd(builder)
