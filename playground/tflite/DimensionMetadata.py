# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from flatbuffers.table import Table
from typing import Optional
np = import_numpy()

class DimensionMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DimensionMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDimensionMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DimensionMetadataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # DimensionMetadata
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DimensionMetadata
    def Format(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DimensionMetadata
    def DenseSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DimensionMetadata
    def ArraySegmentsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # DimensionMetadata
    def ArraySegments(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # DimensionMetadata
    def ArrayIndicesType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # DimensionMetadata
    def ArrayIndices(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def DimensionMetadataStart(builder: flatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: flatbuffers.Builder):
    DimensionMetadataStart(builder)

def DimensionMetadataAddFormat(builder: flatbuffers.Builder, format: int):
    builder.PrependInt8Slot(0, format, 0)

def AddFormat(builder: flatbuffers.Builder, format: int):
    DimensionMetadataAddFormat(builder, format)

def DimensionMetadataAddDenseSize(builder: flatbuffers.Builder, denseSize: int):
    builder.PrependInt32Slot(1, denseSize, 0)

def AddDenseSize(builder: flatbuffers.Builder, denseSize: int):
    DimensionMetadataAddDenseSize(builder, denseSize)

def DimensionMetadataAddArraySegmentsType(builder: flatbuffers.Builder, arraySegmentsType: int):
    builder.PrependUint8Slot(2, arraySegmentsType, 0)

def AddArraySegmentsType(builder: flatbuffers.Builder, arraySegmentsType: int):
    DimensionMetadataAddArraySegmentsType(builder, arraySegmentsType)

def DimensionMetadataAddArraySegments(builder: flatbuffers.Builder, arraySegments: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(arraySegments), 0)

def AddArraySegments(builder: flatbuffers.Builder, arraySegments: int):
    DimensionMetadataAddArraySegments(builder, arraySegments)

def DimensionMetadataAddArrayIndicesType(builder: flatbuffers.Builder, arrayIndicesType: int):
    builder.PrependUint8Slot(4, arrayIndicesType, 0)

def AddArrayIndicesType(builder: flatbuffers.Builder, arrayIndicesType: int):
    DimensionMetadataAddArrayIndicesType(builder, arrayIndicesType)

def DimensionMetadataAddArrayIndices(builder: flatbuffers.Builder, arrayIndices: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(arrayIndices), 0)

def AddArrayIndices(builder: flatbuffers.Builder, arrayIndices: int):
    DimensionMetadataAddArrayIndices(builder, arrayIndices)

def DimensionMetadataEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return DimensionMetadataEnd(builder)
