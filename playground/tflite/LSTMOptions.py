# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class LSTMOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LSTMOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLSTMOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LSTMOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # LSTMOptions
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LSTMOptions
    def FusedActivationFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # LSTMOptions
    def CellClip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LSTMOptions
    def ProjClip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LSTMOptions
    def KernelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # LSTMOptions
    def AsymmetricQuantizeInputs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def LSTMOptionsStart(builder: flatbuffers.Builder):
    builder.StartObject(5)

def Start(builder: flatbuffers.Builder):
    LSTMOptionsStart(builder)

def LSTMOptionsAddFusedActivationFunction(builder: flatbuffers.Builder, fusedActivationFunction: int):
    builder.PrependInt8Slot(0, fusedActivationFunction, 0)

def AddFusedActivationFunction(builder: flatbuffers.Builder, fusedActivationFunction: int):
    LSTMOptionsAddFusedActivationFunction(builder, fusedActivationFunction)

def LSTMOptionsAddCellClip(builder: flatbuffers.Builder, cellClip: float):
    builder.PrependFloat32Slot(1, cellClip, 0.0)

def AddCellClip(builder: flatbuffers.Builder, cellClip: float):
    LSTMOptionsAddCellClip(builder, cellClip)

def LSTMOptionsAddProjClip(builder: flatbuffers.Builder, projClip: float):
    builder.PrependFloat32Slot(2, projClip, 0.0)

def AddProjClip(builder: flatbuffers.Builder, projClip: float):
    LSTMOptionsAddProjClip(builder, projClip)

def LSTMOptionsAddKernelType(builder: flatbuffers.Builder, kernelType: int):
    builder.PrependInt8Slot(3, kernelType, 0)

def AddKernelType(builder: flatbuffers.Builder, kernelType: int):
    LSTMOptionsAddKernelType(builder, kernelType)

def LSTMOptionsAddAsymmetricQuantizeInputs(builder: flatbuffers.Builder, asymmetricQuantizeInputs: bool):
    builder.PrependBoolSlot(4, asymmetricQuantizeInputs, 0)

def AddAsymmetricQuantizeInputs(builder: flatbuffers.Builder, asymmetricQuantizeInputs: bool):
    LSTMOptionsAddAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs)

def LSTMOptionsEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return LSTMOptionsEnd(builder)
